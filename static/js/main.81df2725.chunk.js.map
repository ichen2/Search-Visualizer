{"version":3,"sources":["SearchVisualizer/Node/Node.js","algorithms/searchAlgorithms.js","SearchVisualizer/SearchVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","isStart","isEnd","extraClasses","isVisited","concat","className","React","Component","copyGrid","grid","copy","row","copiedRow","node","currentNode","push","getNeighbors","neighbors","col","length","filter","neighbor","SearchVisualizer","state","nodes","startNode","x","y","endNode","animating","visualizeBFS","bind","visualizeDFS","animateBFS","initializeGrid","callback","startX","startY","endX","endY","nodeRow","setState","orderedVisitedNodes","i","forEach","setTimeout","newGrid","newNode","start","end","visitedNodes","index","currentNodes","neighborNodes","console","log","slice","bfs","stack","pop","isVisted","dfs","animateDFS","id","disabled","onClick","map","rowIndex","nodeIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81df2725.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Node.css';\r\n\r\nexport class Node extends React.Component {\r\n    render() {\r\n        const {isStart, isEnd, isVisited} = this.props;\r\n        let extraClasses = isVisited ? 'visited ' : '';\r\n        extraClasses = extraClasses.concat(isStart ? 'start' : isEnd ? 'end' : '');\r\n        return <div className={\"node \".concat(extraClasses)} ></div>;\r\n    }\r\n  }","export function bfs(nodes, start, end) {\r\n    let grid = copyGrid(nodes);\r\n    let visitedNodes = [[grid[start.row][start.col]]];\r\n    let index = 0;\r\n    while(visitedNodes[index].length > 0) {\r\n        let currentNodes = visitedNodes[index];\r\n        let neighborNodes = [];\r\n        for(let i = 0; i < currentNodes.length; i++) {\r\n            let node = currentNodes[i];\r\n            if(!node.isVisited) {\r\n                node.isVisited = true;\r\n                if(node.row === end.row && node.col === end.col) {\r\n                    console.log(visitedNodes[index]);\r\n                    visitedNodes[index] = visitedNodes[index].slice(0, i+1);\r\n                    console.log(visitedNodes[index]);\r\n                    return visitedNodes;\r\n                }\r\n                neighborNodes = neighborNodes.concat(getNeighbors(grid, node));\r\n            }\r\n        }\r\n        visitedNodes.push(neighborNodes); \r\n        index++;\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\nexport function dfs(nodes, start, end) {\r\n    let grid = copyGrid(nodes);\r\n    let visitedNodes = [grid[start.row][start.col]];\r\n    let stack = [grid[start.row][start.col]];\r\n    while(stack.length > 0) {   \r\n        let currentNode = stack.pop();\r\n        if(!currentNode.isVisted) {\r\n            currentNode.isVisited = true;\r\n            visitedNodes.push(currentNode);\r\n            if(currentNode.row === end.row && currentNode.col === end.col) {\r\n                return visitedNodes;\r\n            }\r\n            let neighborNodes = getNeighbors(grid, currentNode);\r\n            neighborNodes.forEach((node) => stack.push(node));\r\n        }\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\nfunction copyGrid(grid) {\r\n    let copy = [];\r\n    for(const row of grid) {\r\n        let copiedRow = [];\r\n        for(const node of row) {\r\n            const currentNode = {\r\n                ...node\r\n            }; \r\n            copiedRow.push(currentNode);\r\n        }\r\n        copy.push(copiedRow);\r\n    }\r\n    return copy;\r\n}\r\n\r\nfunction getNeighbors(grid, node) {\r\n    let neighbors = []\r\n    let {row, col} = node;\r\n    if(row < grid.length -1) {\r\n        neighbors.push(grid[node.row+1][node.col]);\r\n    }\r\n    if(col < grid[0].length - 1) {\r\n        neighbors.push(grid[node.row][node.col+1]);\r\n    }\r\n    if(row > 0) {\r\n        neighbors.push(grid[node.row-1][node.col]);\r\n    }\r\n    if(col > 0) {\r\n        neighbors.push(grid[node.row][node.col-1]);\r\n    }\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}","import React, {Component} from 'react';\nimport './SearchVisualizer.css';\nimport { Node } from './Node/Node.js';\nimport { bfs, dfs } from '../algorithms/searchAlgorithms.js'\n\nconst NUM_ROWS = 20;\nconst NUM_COLS = 30;\n\nexport class SearchVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: [], \n            startNode: {x: 10, y: 10},\n            endNode: {x: 20, y: 15}, \n            animating: false\n        };\n        this.visualizeBFS = this.visualizeBFS.bind(this);\n        this.visualizeDFS = this.visualizeDFS.bind(this);\n        this.animateBFS = this.animateBFS.bind(this);\n        this.initializeGrid = this.initializeGrid.bind(this);\n    }\n    componentDidMount() {\n        this.initializeGrid();\n    }\n    initializeGrid(callback = () => {}) {\n        let {x: startX, y: startY} = this.state.startNode;\n        let {x: endX, y: endY} = this.state.endNode;\n        const nodes = [];\n        for(let row = 0; row < NUM_ROWS; row++) {\n            let nodeRow = [];\n            for(let col = 0; col < NUM_COLS; col++) {\n                const currentNode = {\n                    col,\n                    row,\n                    isStart: row === startY && col == startX,\n                    isEnd: row === endY && col == endX,\n                    isVisited: false\n                } \n                nodeRow.push(currentNode);\n            }\n            nodes.push(nodeRow);\n        }\n        this.setState({nodes}, callback);\n    }\n    animateBFS(orderedVisitedNodes) {\n        for(let i = 0; i < orderedVisitedNodes.length; i++) {\n            orderedVisitedNodes[i].forEach((node) => { \n                setTimeout(() => {\n                    const newGrid = this.state.nodes;\n                    const newNode = {...node, isVisited: true};\n                    newGrid[node.row][node.col] = newNode;\n                    this.setState({nodes: newGrid});\n                    if(i === orderedVisitedNodes.length - 1) { this.setState({animating: false}); }\n                }, 10 * i);\n            });\n        }\n    }\n    animateDFS(orderedVisitedNodes) {\n        for(let i = 0; i < orderedVisitedNodes.length; i++) {\n            setTimeout(() => {\n                const newGrid = this.state.nodes;\n                let node = orderedVisitedNodes[i];\n                const newNode = {...node, isVisited: true};\n                newGrid[node.row][node.col] = newNode;\n                this.setState({nodes: newGrid});\n                if(i === orderedVisitedNodes.length - 1) { this.setState({animating: false}); }\n            }, 10 * i);\n        }\n    }\n    visualizeBFS() {\n        this.setState({animating: true}, () => {\n            this.initializeGrid(() => {\n                    let {x: startX, y: startY} = this.state.startNode;\n                    let {x: endX, y: endY} = this.state.endNode;\n                    const {nodes: grid} = this.state;\n                    let orderedVisitedNodes = bfs(grid, grid[startY][startX], grid[endY][endX]);\n                    this.animateBFS(orderedVisitedNodes);\n            });\n        });\n    }\n    visualizeDFS() {\n        this.setState({animating: true}, () => {\n            this.initializeGrid(() => {\n                    let {x: startX, y: startY} = this.state.startNode;\n                    let {x: endX, y: endY} = this.state.endNode;\n                    const {nodes: grid} = this.state;\n                    let orderedVisitedNodes = dfs(grid, grid[startY][startX], grid[endY][endX]);\n                    this.animateDFS(orderedVisitedNodes);\n            });\n        });\n    }\n    render() {\n        let {nodes} = this.state;\n        return (\n            <div>\n                <div id=\"header\">\n                    <span id=\"title\">Search Visualizer</span>\n                    <button className=\"search-btn\" disabled={this.state.animating} onClick={this.visualizeBFS}>Breadth-First Search</button>\n                    <button className=\"search-btn\" disabled={this.state.animating} onClick={this.visualizeDFS}>Depth-First Search</button>\n                </div>\n                <div id=\"grid\">\n                    {nodes.map((row, rowIndex) => {\n                        return <div className=\"row\" key={rowIndex}>\n                            {row.map((node, nodeIndex) => \n                                <Node \n                                    key={nodeIndex}\n                                    isStart={node.isStart}\n                                    isEnd={node.isEnd}\n                                    isVisited={node.isVisited}\n                                />\n                            )}\n                        </div>\n                    })}\n                </div>\n            </div>\n        );\n    }\n  }","import './App.css';\nimport { SearchVisualizer } from './SearchVisualizer/SearchVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SearchVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}