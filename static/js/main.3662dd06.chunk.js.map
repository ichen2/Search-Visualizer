{"version":3,"sources":["SearchVisualizer/Node/Node.js","algorithms/searchAlgorithms.js","SearchVisualizer/SearchVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","isStart","isEnd","isVisited","extraClasses","className","concat","React","Component","bfs","nodes","start","end","grid","copy","row","copiedRow","node","currentNode","push","copyGrid","visitedNodes","col","index","length","currentNodes","neighborNodes","i","getNeighbors","neighbors","filter","neighbor","SearchVisualizer","state","startNode","x","y","endNode","visualizeBFS","bind","animateBFS","initializeGrid","startX","startY","endX","endY","nodeRow","setState","orderedVisitedNodes","console","log","setTimeout","newGrid","slice","forEach","newNode","id","onClick","map","rowIndex","nodeIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAGaA,EAAb,4JACI,WAAU,IAAD,EAC+BC,KAAKC,MAAlCC,EADF,EACEA,QAASC,EADX,EACWA,MAAOC,EADlB,EACkBA,UACjBC,EAAeH,EAAU,QAAUC,EAAQ,MAAQC,EAAY,UAAY,GACjF,OAAO,qBAAKE,UAAW,QAAQC,OAAOF,SAJ9C,GAA0BG,IAAMC,W,OCHzB,SAASC,EAAIC,EAAOC,EAAOC,GAI9B,IAHA,IAAIC,EAsBR,SAAkBA,GACd,IADoB,EAChBC,EAAO,GADS,cAEHD,GAFG,IAEpB,IAAI,EAAJ,qBAAuB,CAAC,IAAD,EAAbE,EAAa,QACfC,EAAY,GADG,cAEDD,GAFC,IAEnB,IAAI,EAAJ,qBAAuB,CAAC,IAAdE,EAAa,QACbC,EAAW,eACVD,GAEPD,EAAUG,KAAKD,IANA,8BAQnBJ,EAAKK,KAAKH,IAVM,8BAYpB,OAAOF,EAlCIM,CAASV,GAChBW,EAAe,CAAC,CAACR,EAAKF,EAAMI,KAAKJ,EAAMW,OACvCC,EAAQ,EACNF,EAAaE,GAAOC,OAAS,GAAKD,EAAQ,IAAI,CAGhD,IAFA,IAAIE,EAAeJ,EAAaE,GAC5BG,EAAgB,GACZC,EAAI,EAAGA,EAAIF,EAAaD,OAAQG,IAAK,CACzC,IAAIV,EAAOQ,EAAaE,GACxB,IAAIV,EAAKd,UAAW,CAEhB,GADAc,EAAKd,WAAY,EACdc,EAAKF,MAAQH,EAAIG,KAAOE,EAAKK,MAAQV,EAAIU,IACxC,OAAOD,EAEXK,EAAgBA,EAAcpB,OAAOsB,EAAaf,EAAMI,KAGhEI,EAAaF,KAAKO,GAClBH,IAEJ,OAAOF,EAkBX,SAASO,EAAaf,EAAMI,GACxB,IAAIY,EAAY,GACXd,EAAYE,EAAZF,IAAKO,EAAOL,EAAPK,IAaV,OAZGP,EAAMF,EAAKW,OAAQ,GAClBK,EAAUV,KAAKN,EAAKI,EAAKF,IAAI,GAAGE,EAAKK,MAEtCP,EAAM,GACLc,EAAUV,KAAKN,EAAKI,EAAKF,IAAI,GAAGE,EAAKK,MAEtCA,EAAMT,EAAK,GAAGW,OAAS,GACtBK,EAAUV,KAAKN,EAAKI,EAAKF,KAAKE,EAAKK,IAAI,IAExCA,EAAM,GACLO,EAAUV,KAAKN,EAAKI,EAAKF,KAAKE,EAAKK,IAAI,IAEpCO,EAAUC,QAAO,SAACC,GAAD,OAAeA,EAAS5B,aChDpD,IAGa6B,EAAb,kDACI,WAAYhC,GAAQ,IAAD,8BACf,cAAMA,IACDiC,MAAQ,CACTvB,MAAO,GACPwB,UAAW,CAACC,EAAG,GAAIC,EAAG,IACtBC,QAAS,CAACF,EAAG,GAAIC,EAAG,KAExB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBATP,EADvB,qDAYI,WACIxC,KAAK0C,mBAbb,4BAeI,WAII,IAJc,IAAD,EACgB1C,KAAKkC,MAAMC,UAAhCQ,EADK,EACRP,EAAcQ,EADN,EACGP,EADH,EAEYrC,KAAKkC,MAAMI,QAA5BO,EAFK,EAERT,EAAYU,EAFJ,EAECT,EACR1B,EAAQ,GACNK,EAAM,EAAGA,EAtBR,GAsBwBA,IAAO,CAEpC,IADA,IAAI+B,EAAU,GACNxB,EAAM,EAAGA,EAvBZ,GAuB4BA,IAAO,CACpC,IAAMJ,EAAc,CAChBI,MACAP,MACAd,QAASc,IAAQ4B,GAAUrB,GAAOoB,EAClCxC,MAAOa,IAAQ8B,GAAQvB,GAAOsB,EAC9BzC,WAAW,GAEf2C,EAAQ3B,KAAKD,GAEjBR,EAAMS,KAAK2B,GAEf/C,KAAKgD,SAAS,CAACrC,YAjCvB,wBAmCI,SAAWsC,GAAsB,IAAD,OAC5BC,QAAQC,IAAIF,GACZ,IAF4B,eAEpBrB,GACJwB,YAAW,WACP,IAAMC,EAAU,EAAKnB,MAAMvB,MAAM2C,QACjCL,EAAoBrB,GAAG2B,SAAQ,SAACrC,GAC5B,IAAMsC,EAAO,2BAAOtC,GAAP,IAAad,WAAW,IACrCiD,EAAQnC,EAAKF,KAAKE,EAAKK,KAAOiC,KAElC,EAAKR,SAAS,CAACrC,MAAO0C,MACvB,IAAMzB,IARLA,EAAI,EAAGA,EAAIqB,EAAoBxB,OAAQG,IAAM,EAA7CA,KArChB,0BAgDI,WAAgB,IAAD,EACkB5B,KAAKkC,MAAMC,UAAhCQ,EADG,EACNP,EAAcQ,EADR,EACKP,EADL,EAEcrC,KAAKkC,MAAMI,QAA5BO,EAFG,EAENT,EAAYU,EAFN,EAEGT,EACAvB,EAAQd,KAAKkC,MAApBvB,MACHsC,EAAsBvC,EAAII,EAAMA,EAAK8B,GAAQD,GAAS7B,EAAKgC,GAAMD,IACrE7C,KAAKyC,WAAWQ,KArDxB,oBAuDI,WAAU,IACDtC,EAASX,KAAKkC,MAAdvB,MACL,OACI,gCACI,sBAAK8C,GAAG,SAAR,UACI,sBAAMA,GAAG,QAAT,+BACA,wBAAQnD,UAAU,aAAaoD,QAAS1D,KAAKuC,aAA7C,qCAEJ,qBAAKkB,GAAG,OAAR,SACK9C,EAAMgD,KAAI,SAAC3C,EAAK4C,GACb,OAAO,qBAAKtD,UAAU,MAAf,SACFU,EAAI2C,KAAI,SAACzC,EAAM2C,GAAP,OACL,cAAC,EAAD,CAEI3D,QAASgB,EAAKhB,QACdC,MAAOe,EAAKf,MACZC,UAAWc,EAAKd,WAHXyD,OAHgBD,eAjEzD,GAAsCnD,aCGvBqD,MARf,WACE,OACE,qBAAKxD,UAAU,MAAf,SACE,cAAC,EAAD,OCMSyD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3662dd06.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Node.css';\r\n\r\nexport class Node extends React.Component {\r\n    render() {\r\n        const {isStart, isEnd, isVisited} = this.props;\r\n        const extraClasses = isStart ? 'start' : isEnd ? 'end' : isVisited ? 'visited' : '';\r\n        return <div className={\"node \".concat(extraClasses)} ></div>;\r\n    }\r\n  }","export function bfs(nodes, start, end) {\r\n    let grid = copyGrid(nodes);\r\n    let visitedNodes = [[grid[start.row][start.col]]];\r\n    let index = 0;\r\n    while(visitedNodes[index].length > 0 && index < 50) {\r\n        let currentNodes = visitedNodes[index];\r\n        let neighborNodes = [];\r\n        for(let i = 0; i < currentNodes.length; i++) {\r\n            let node = currentNodes[i];\r\n            if(!node.isVisited) {\r\n                node.isVisited = true;\r\n                if(node.row === end.row && node.col === end.col) {\r\n                    return visitedNodes;\r\n                }\r\n                neighborNodes = neighborNodes.concat(getNeighbors(grid, node));\r\n            }\r\n        }\r\n        visitedNodes.push(neighborNodes); \r\n        index++;\r\n    }\r\n    return visitedNodes;\r\n}\r\n\r\nfunction copyGrid(grid) {\r\n    let copy = [];\r\n    for(const row of grid) {\r\n        let copiedRow = [];\r\n        for(const node of row) {\r\n            const currentNode = {\r\n                ...node\r\n            }; \r\n            copiedRow.push(currentNode);\r\n        }\r\n        copy.push(copiedRow);\r\n    }\r\n    return copy;\r\n}\r\n\r\nfunction getNeighbors(grid, node) {\r\n    let neighbors = []\r\n    let {row, col} = node;\r\n    if(row < grid.length -1) {\r\n        neighbors.push(grid[node.row+1][node.col]);\r\n    }\r\n    if(row > 0) {\r\n        neighbors.push(grid[node.row-1][node.col]);\r\n    }\r\n    if(col < grid[0].length - 1) {\r\n        neighbors.push(grid[node.row][node.col+1]);\r\n    }\r\n    if(col > 0) {\r\n        neighbors.push(grid[node.row][node.col-1]);\r\n    }\r\n    return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}","import React, {Component} from 'react';\nimport './SearchVisualizer.css';\nimport { Node } from './Node/Node.js';\nimport { bfs } from '../algorithms/searchAlgorithms.js'\n\nconst NUM_ROWS = 20;\nconst NUM_COLS = 40;\n\nexport class SearchVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nodes: [], \n            startNode: {x: 10, y: 10},\n            endNode: {x: 30, y: 15}\n        };\n        this.visualizeBFS = this.visualizeBFS.bind(this);\n        this.animateBFS = this.animateBFS.bind(this);\n        this.initializeGrid = this.initializeGrid.bind(this);\n    }\n    componentDidMount() {\n        this.initializeGrid()\n    }\n    initializeGrid() {\n        let {x: startX, y: startY} = this.state.startNode;\n        let {x: endX, y: endY} = this.state.endNode;\n        const nodes = [];\n        for(let row = 0; row < NUM_ROWS; row++) {\n            let nodeRow = [];\n            for(let col = 0; col < NUM_COLS; col++) {\n                const currentNode = {\n                    col,\n                    row,\n                    isStart: row === startY && col == startX,\n                    isEnd: row === endY && col == endX,\n                    isVisited: false\n                } \n                nodeRow.push(currentNode);\n            }\n            nodes.push(nodeRow);\n        }\n        this.setState({nodes});\n    }\n    animateBFS(orderedVisitedNodes) {\n        console.log(orderedVisitedNodes);\n        for(let i = 0; i < orderedVisitedNodes.length; i++) {\n            setTimeout(() => {\n                const newGrid = this.state.nodes.slice();\n                orderedVisitedNodes[i].forEach((node) => {\n                    const newNode = {...node, isVisited: true};\n                    newGrid[node.row][node.col] = newNode;\n                });\n                this.setState({nodes: newGrid});\n            }, 100 * i);\n        }\n    }\n    visualizeBFS() {\n        let {x: startX, y: startY} = this.state.startNode;\n        let {x: endX, y: endY} = this.state.endNode;\n        const {nodes: grid} = this.state;\n        let orderedVisitedNodes = bfs(grid, grid[startY][startX], grid[endY][endX]);\n        this.animateBFS(orderedVisitedNodes);\n    }\n    render() {\n        let {nodes} = this.state;\n        return (\n            <div>\n                <div id=\"header\">\n                    <span id=\"title\">Search Visualizer</span>\n                    <button className=\"search-btn\" onClick={this.visualizeBFS}>Breadth-First Search</button>\n                </div>\n                <div id=\"grid\">\n                    {nodes.map((row, rowIndex) => {\n                        return <div className=\"row\" key={rowIndex}>\n                            {row.map((node, nodeIndex) => \n                                <Node \n                                    key={nodeIndex}\n                                    isStart={node.isStart}\n                                    isEnd={node.isEnd}\n                                    isVisited={node.isVisited}\n                                />\n                            )}\n                        </div>\n                    })}\n                </div>\n            </div>\n        );\n    }\n  }","import './App.css';\nimport { SearchVisualizer } from './SearchVisualizer/SearchVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SearchVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}